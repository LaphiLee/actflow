akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  
  actor {
    provider = "cluster"
  }
  
  remote {
    log-remote-lifecycle-events = off
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      maximum-frame-size = 100MiB
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://engineActorSystem@127.0.0.1:2551",
      "akka.tcp://engineActorSystem@127.0.0.1:2552"]

    
    # excluded from snippet
    auto-down-unreachable-after = 10s
    
    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s
  }
}

engine-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use 
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to 	
    parallelism-min = 2
    # Parallelism (threads) . . . ceil(available processors * factor)  
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to  
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be  
  # processed per actor before the thread jumps to the next actor.  
  # Set to 1 for as fair as possible. 
  throughput = 100
  mailbox-capacity = -1
  mailbox-type =""
}

# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled=off

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host. 
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

akka.actor.deployment {
  
  /process/classAct {
    router = consistent-hashing-group
    routees.paths = ["/user/classAct"]
    cluster {
      enabled = on
      max-nr-of-instances-per-node = 10
      max-total-nr-of-instances = 100000
      allow-local-routees = on
      use-role = compute
    }
  }
  
  /process/beanAct {
    router = consistent-hashing-group
    routees.paths = ["/user/beanAct"]
    cluster {
      enabled = on
      max-nr-of-instances-per-node = 10
      max-total-nr-of-instances = 100000
      allow-local-routees = on
      use-role = compute
    }
  }
  
  /process/serviceAct {
    router = consistent-hashing-group
    routees.paths = ["/user/serviceAct"]
    cluster {
      enabled = on
      max-nr-of-instances-per-node = 10
      max-total-nr-of-instances = 100000
      allow-local-routees = on
      use-role = compute
    }
  }
}